{
	"name": "df_transform_cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_cases_and_deaths",
						"type": "DatasetReference"
					},
					"name": "Casesanddeathsource"
				},
				{
					"dataset": {
						"referenceName": "df_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_cases_and_deaths",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filterEuropeOnly"
				},
				{
					"name": "SelectOnlyRequirdField"
				},
				{
					"name": "PivotCount"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "selectForSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('roundRobin', 2)) ~> Casesanddeathsource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> CountryLookup",
				"Casesanddeathsource filter(continent == \"Europe\" && not(isNull(country_code))) ~> filterEuropeOnly",
				"filterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'Reported'+'_Date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyRequirdField",
				"SelectOnlyRequirdField pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          Reported_Date),",
				"     pivotBy(indicator, ['Confirmed Cases', 'deaths']),",
				"     {} = sum(daily_count),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> PivotCount",
				"PivotCount, CountryLookup lookup(PivotCount@country == CountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = PivotCount@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = PivotCount@population,",
				"          {Confirmed Cases},",
				"          count_deaths = deaths,",
				"          Reported_Date,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectForSink",
				"selectForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['cases and deaths.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}